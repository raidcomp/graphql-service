scalar Time

type User {
  id: ID!
  login: String!
  email: String!
  createdTime: Time!
  updatedTime: Time!
}

type Query {
  user(id: ID, login: String): User
}

input LoginUserInput {
  # TODO: Obviously this shouldn't be a raw string
  # We should hash with a nonce on the client and send that
  password: String!
}

input CreateUserInput {
  login: String!
  email: String!

  # TODO: Obviously this shouldn't be a raw string
  # We should hash with a nonce on the client and send that
  password: String!
}

input RefreshTokenInput {
  token: String!
}

type CreateUserPayload {
  user: User
  token: String
  error: CreateUserPayloadError
}

type CreateUserPayloadError {
  isLoginTaken: Boolean!
  isLoginInvalid: Boolean!
}

type LoginUserPayload {
  user: User
  token: String
  error: LoginUserPayloadError
}

type LoginUserPayloadError {
  isPasswordIncorrect: Boolean!
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload!
  loginUser(input: LoginUserInput!): LoginUserPayload!
  refreshToken(input: RefreshTokenInput!): User!
}